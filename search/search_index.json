{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"pyfonts a simple and reproducible way of using fonts     in matplotlib <p>In short, <code>pyfonts</code>:</p> <ul> <li>allows you to use all Google Font fonts</li> <li>allows you to use any font from an arbitrary URL</li> <li>is fast (thanks to its cache system)</li> </ul> <p></p> <pre><code>pip install pyfonts\n</code></pre> <p></p>"},{"location":"#quick-start","title":"Quick start","text":"<p>The easiest (and recommended) way of using <code>pyfonts</code> is to find the name of a font you like on Google font and pass it to <code>load_google_font()</code>:</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont = load_google_font(\"Fascinate Inline\")\n\nfig, ax = plt.subplots()\nax.text(\n   x=0.2,\n   y=0.5,\n   s=\"Hey there!\",\n   size=30,\n   font=font # We pass it to the `font` argument\n)\n</code></pre>"},{"location":"#boldlight-fonts","title":"Bold/light fonts","text":"<p>In order to have a bold font, you can use the <code>weight</code> argument that accepts either one of: \"thin\", \"extra-light\", \"light\", \"regular\",\"medium\", \"semi-bold\", \"bold\", \"extra-bold\", \"black\", or any number between 100 and 900 (the higher the bolder).</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont_bold = load_google_font(\"Roboto\", weight=\"bold\")\nfont_regular = load_google_font(\"Roboto\", weight=\"regular\") # Default\nfont_light = load_google_font(\"Roboto\", weight=\"thin\")\n\nfig, ax = plt.subplots()\ntext_params = dict(x=0.2,size=30,)\nax.text(\n   y=0.7,\n   s=\"Bold font\",\n   font=font_bold,\n   **text_params\n)\nax.text(\n   y=0.5,\n   s=\"Regular font\",\n   font=font_regular,\n   **text_params\n)\nax.text(\n   y=0.3,\n   s=\"Light font\",\n   font=font_light,\n   **text_params\n)\n</code></pre> <p>Note that not all fonts have different weight and can be set to bold/light.</p>"},{"location":"#italic-font","title":"Italic font","text":"<p><code>load_google_font()</code> has an <code>italic</code> argument, that can either be <code>True</code> or <code>False</code> (default to <code>False</code>).</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont = load_google_font(\"Roboto\", italic=True)\n\nfig, ax = plt.subplots()\nax.text(\n   x=0.2,\n   y=0.5,\n   s=\"This text is in italic\",\n   size=30,\n   font=font\n)\n</code></pre> <p>Note that not all fonts can be set to italic.</p>"},{"location":"#set-font-globally","title":"Set font globally","text":"<p>If you also want to change the default font used for e.g. the axis labels, legend entries, titles, etc., you can use <code>set_default_font()</code>:</p> <pre><code># mkdocs: render\nfrom pyfonts import set_default_font, load_google_font\n\nfont = load_google_font(\"Fascinate Inline\")\nset_default_font(font) # Sets font for all text\n\nfig, ax = plt.subplots()\n\nx = [0, 1, 2, 3]\ny = [x**2 for x in x]\n\n# x+y tick labels, legend entries, title etc.\n# will all be in Fascinate Inline\nax.plot(x, y, \"-o\", label='y = x\u00b2')\nax.set_title('Simple Line Chart')\nax.text(x=0, y=5, s=\"Hello world\", size=20)\nax.legend()\n\n# change the font for a specific element as usual\nax.set_xlabel(\"x values\", font=load_google_font(\"Roboto\"), size=15)\n</code></pre> <p></p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#114-dev","title":"1.1.4 (dev)","text":"<ul> <li>New landing page (PR #36)</li> <li>Fix path VS url detection (issue #34, PR #35)</li> </ul>"},{"location":"changelog/#113-stable","title":"1.1.3 (stable)","text":"<p>This changelog page has been created when <code>pyfonts</code> 1.1.3 was released.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Any kind of contribution is more than welcomed! There are several ways you can contribute:</p> <ul> <li>Opening GitHub issues to list the bugs you've found</li> <li>Implementation of new features or resolution of existing bugs</li> <li>Enhancing the documentation</li> </ul>"},{"location":"contributing/#how-pyfonts-works","title":"How <code>pyfonts</code> works","text":"<p>Under the bonnet, <code>pyfonts</code> does several things, but it can be summarised as follows:</p> <ul> <li>Take the user's data (font name, weight, italics) and create a url that will be passed to Google's Font API.</li> <li>Parse the response to obtain the url of the actual font file</li> <li>Retrieve the font file from a temporary file</li> <li>Use this temporary file to create a matplotlib font object (which is <code>FontProperties</code>)</li> <li>Return this object</li> </ul> <p>By default, the font file url is cached to reduce the number of requests required and improve performance. The cache can be cleared with <code>clear_pyfonts_cache()</code>.</p>"},{"location":"contributing/#setting-up-your-environment","title":"Setting up your environment","text":""},{"location":"contributing/#install-for-development","title":"Install for development","text":"<ul> <li> <p>Fork the repository to your own GitHub account.</p> </li> <li> <p>Clone your forked repository to your local machine (ensure you have Git installed):</p> </li> </ul> <pre><code>git clone https://github.com/YOURUSERNAME/pyfonts.git\ncd pyfonts\n</code></pre> <ul> <li>Create a new branch:</li> </ul> <pre><code>git checkout -b my-feature\n</code></pre> <ul> <li>Set up your Python environment (ensure you have uv installed):</li> </ul> <pre><code>uv sync --all-extras --dev\nuv pip install -e .\n</code></pre>"},{"location":"contributing/#code","title":"Code!","text":"<p>You can now make changes to the package and start coding!</p>"},{"location":"contributing/#run-the-test","title":"Run the test","text":"<ul> <li>Test that everything works correctly by running:</li> </ul> <pre><code>uv run pytest\n</code></pre>"},{"location":"contributing/#preview-documentation-locally","title":"Preview documentation locally","text":"<pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"contributing/#push-changes","title":"Push changes","text":"<ul> <li>Commit and push your changes:</li> </ul> <pre><code>git add -A\ngit commit -m \"description of what you did\"\ngit push\n</code></pre> <ul> <li>Go back to your fork and click on the \"Open a PR\" popup</li> </ul> <p>Congrats! Once your PR is merged, it will be part of <code>pyfonts</code>.</p> <p></p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#quick-start","title":"Quick start","text":"<p>The easiest (and recommended) way of using <code>pyfonts</code> is to find the name of a font you like on Google font and pass it to <code>load_google_font()</code>:</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont = load_google_font(\"Fascinate Inline\")\n\nfig, ax = plt.subplots()\nax.text(\n   x=0.2,\n   y=0.5,\n   s=\"Hey there!\",\n   size=30,\n   font=font # We pass it to the `font` argument\n)\n</code></pre>"},{"location":"examples/#boldlight-fonts","title":"Bold/light fonts","text":"<p>In order to have a bold font, you can use the <code>weight</code> argument that accepts either one of: \"thin\", \"extra-light\", \"light\", \"regular\",\"medium\", \"semi-bold\", \"bold\", \"extra-bold\", \"black\", or any number between 100 and 900 (the higher the bolder).</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont_bold = load_google_font(\"Roboto\", weight=\"bold\")\nfont_regular = load_google_font(\"Roboto\", weight=\"regular\") # Default\nfont_light = load_google_font(\"Roboto\", weight=\"thin\")\n\nfig, ax = plt.subplots()\ntext_params = dict(x=0.2,size=30,)\nax.text(\n   y=0.7,\n   s=\"Bold font\",\n   font=font_bold,\n   **text_params\n)\nax.text(\n   y=0.5,\n   s=\"Regular font\",\n   font=font_regular,\n   **text_params\n)\nax.text(\n   y=0.3,\n   s=\"Light font\",\n   font=font_light,\n   **text_params\n)\n</code></pre> <p>Note that not all fonts have different weight and can be set to bold/light.</p>"},{"location":"examples/#italic-font","title":"Italic font","text":"<p><code>load_google_font()</code> has an <code>italic</code> argument, that can either be <code>True</code> or <code>False</code> (default to <code>False</code>).</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont = load_google_font(\"Roboto\", italic=True)\n\nfig, ax = plt.subplots()\nax.text(\n   x=0.2,\n   y=0.5,\n   s=\"This text is in italic\",\n   size=30,\n   font=font\n)\n</code></pre> <p>Note that not all fonts can be set to italic.</p>"},{"location":"examples/#set-font-globally","title":"Set font globally","text":"<p>If you also want to change the default font used for e.g. the axis labels, legend entries, titles, etc., you can use <code>set_default_font()</code>:</p> <pre><code># mkdocs: render\nfrom pyfonts import set_default_font, load_google_font\n\nfont = load_google_font(\"Fascinate Inline\")\nset_default_font(font) # Sets font for all text\n\nfig, ax = plt.subplots()\n\nx = [0, 1, 2, 3]\ny = [x**2 for x in x]\n\n# x+y tick labels, legend entries, title etc.\n# will all be in Fascinate Inline\nax.plot(x, y, \"-o\", label='y = x\u00b2')\nax.set_title('Simple Line Chart')\nax.text(x=0, y=5, s=\"Hello world\", size=20)\nax.legend()\n\n# change the font for a specific element as usual\nax.set_xlabel(\"x values\", font=load_google_font(\"Roboto\"), size=15)\n</code></pre>"},{"location":"reference/cache/","title":"Cache","text":"<p>By default, <code>pyfonts</code> caches font files to improve performance. But you can disable this behaviour by setting <code>use_cache=False</code> in the <code>load_font()</code> and <code>load_google_font()</code> functions, and manually clearing the cache with <code>clear_pyfonts_cache()</code>.</p> <p></p> <p></p>"},{"location":"reference/cache/#pyfonts.clear_pyfonts_cache","title":"<code>pyfonts.clear_pyfonts_cache(verbose=True)</code>","text":"Cleans both <ol> <li>The font cache directory</li> <li>The Google Fonts URL cache</li> </ol> <p>Args:</p> <ul> <li><code>verbose</code>: Whether or not to print a cache cleanup message. The default value is True.</li> </ul> <p>Examples:</p> <pre><code>from pyfonts import clear_pyfonts_cache\nclear_pyfonts_cache()\n</code></pre>"},{"location":"reference/load_font/","title":"Load font","text":""},{"location":"reference/load_font/#load-font","title":"Load font","text":""},{"location":"reference/load_font/#pyfonts.load_font","title":"<code>pyfonts.load_font(font_url=None, use_cache=True, danger_not_verify_ssl=False, font_path=None)</code>","text":"<p>Loads a matplotlib <code>FontProperties</code> object from a remote url or a local file, that you can then use in your matplotlib charts.</p> <p>This function is most useful when the font you are looking for is stored locally or is not available in Google Fonts. Otherwise, it's easier to use the <code>load_google_font()</code> function instead.</p> <p>If the url points to a font file on Github, add <code>?raw=true</code> at the end of the url (see examples below).</p> <p>Parameters:</p> Name Type Description Default <code>font_url</code> <code>Optional[str]</code> <p>It may be one of the following: - A URL pointing to a binary font file. - The local file path of the font.</p> <code>None</code> <code>use_cache</code> <code>bool</code> <p>Whether or not to cache fonts (to make pyfonts faster). Default to <code>True</code>.</p> <code>True</code> <code>danger_not_verify_ssl</code> <code>bool</code> <p>Whether or not to to skip SSL certificate on <code>ssl.SSLCertVerificationError</code>. If <code>True</code>, it's a security risk (such as data breaches or man-in-the-middle attacks), but can be convenient in some cases, like local development when behind a firewall.</p> <code>False</code> <code>font_path</code> <code>Optional[str]</code> <p>(deprecated) The local file path of the font. Use <code>font_url</code> instead.</p> <code>None</code> <p>Returns:</p> Type Description <code>FontProperties</code> <p>matplotlib.font_manager.FontProperties: A <code>FontProperties</code> object containing the loaded font.</p> <p>Examples:</p> <pre><code>```python\nfrom pyfonts import load_font\n\nfont = load_font(\n    \"https://github.com/y-sunflower/pyfonts/blob/main/tests/Ultra-Regular.ttf?raw=true\"\n)\n```\n</code></pre>"},{"location":"reference/load_font/#examples","title":"Examples","text":"<p>Most font files are stored on Github, but to pass a valid font url, you need to add <code>?raw=true</code> to the end of it.</p> <p>So the url goes from:</p> <pre><code>https://github.com/google/fonts/blob/main/ofl/amaranth/Amaranth-Bold.ttf\n</code></pre> <p>To:</p> <pre><code>https://github.com/google/fonts/blob/main/ofl/amaranth/Amaranth-Bold.ttf?raw=true\n</code></pre> <p>What's more, if you find a font on the Google font repo (for example, here: <code>https://github.com/google/fonts/</code>), it will probably be easier to use the <code>load_google_font()</code> function.</p>"},{"location":"reference/load_font/#basic-usage","title":"Basic usage","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_font\n\nfont = load_font(\n   \"https://github.com/y-sunflower/pyfonts/blob/main/tests/Ultra-Regular.ttf?raw=true\"\n)\n\nfig, ax = plt.subplots()\nax.text(\n   x=0.2,\n   y=0.3,\n   s=\"Hey there!\",\n   size=30,\n   font=font\n)\n</code></pre>"},{"location":"reference/load_font/#custom-font","title":"Custom font","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_font\n\nfont = load_font(\n   \"https://github.com/google/fonts/blob/main/ofl/amaranth/Amaranth-Bold.ttf?raw=true\"\n)\n\nfig, ax = plt.subplots()\nax.text(\n   x=0.2,\n   y=0.3,\n   s=\"Hey there!\",\n   size=30,\n   font=font\n)\n</code></pre>"},{"location":"reference/load_font/#use-multiple-fonts","title":"Use multiple fonts","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_font\n\nfont_1 = load_font(\n   \"https://github.com/y-sunflower/pyfonts/blob/main/tests/Ultra-Regular.ttf?raw=true\"\n)\nfont_2 = load_font(\n   \"https://github.com/google/fonts/blob/main/ofl/amaranth/Amaranth-Bold.ttf?raw=true\"\n)\n\nfig, ax = plt.subplots()\n\nax.text(\n   x=0.2,\n   y=0.3,\n   s=\"Hey there!\",\n   size=30,\n   font=font_1\n)\n\nax.text(\n   x=0.4,\n   y=0.6,\n   s=\"Hello world\",\n   size=30,\n   font=font_2\n)\n</code></pre>"},{"location":"reference/load_google_font/","title":"Load google font","text":""},{"location":"reference/load_google_font/#load-google-font","title":"Load Google font","text":""},{"location":"reference/load_google_font/#pyfonts.load_google_font","title":"<code>pyfonts.load_google_font(family, weight=None, italic=None, allowed_formats=['woff2', 'woff', 'ttf', 'otf'], use_cache=True, danger_not_verify_ssl=False)</code>","text":"<p>Load a font from Google Fonts with specified styling options and return a font property object that you can then use in your matplotlib charts.</p> <p>The easiest way to find the font you want is to browse Google font and then pass the font name to the <code>family</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>family</code> <code>str</code> <p>Font family name (e.g., \"Open Sans\", \"Roboto\", etc).</p> required <code>weight</code> <code>Optional[Union[int, str]]</code> <p>Desired font weight (e.g., 400, 700) or one of 'thin', 'extra-light', 'light',</p> <code>None</code> <code>italic</code> <code>Optional[bool]</code> <p>Whether to use the italic variant. Default is <code>None</code>.</p> <code>None</code> <code>allowed_formats</code> <code>List[str]</code> <p>List of acceptable font file formats. Defaults to [\"woff2\", \"woff\", \"ttf\", \"otf\"].</p> <code>['woff2', 'woff', 'ttf', 'otf']</code> <code>use_cache</code> <code>bool</code> <p>Whether or not to cache fonts (to make pyfonts faster). Default to <code>True</code>.</p> <code>True</code> <code>danger_not_verify_ssl</code> <code>bool</code> <p>Whether or not to to skip SSL certificate on</p> <code>False</code> <p>Returns:</p> Type Description <code>FontProperties</code> <p>matplotlib.font_manager.FontProperties: A <code>FontProperties</code> object containing the loaded font.</p> <p>Examples:</p> <pre><code>```python\nfrom pyfonts import load_google_font\n\nfont = load_google_font(\"Roboto\") # default Roboto font\nfont = load_google_font(\"Roboto\", weight=\"bold\") # bold font\nfont = load_google_font(\"Roboto\", italic=True) # italic font\nfont = load_google_font(\"Roboto\", weight=\"bold\", italic=True) # italic and bold\n```\n</code></pre>"},{"location":"reference/load_google_font/#examples","title":"Examples","text":""},{"location":"reference/load_google_font/#basic-usage","title":"Basic usage","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont = load_google_font(\"Roboto\") # default Roboto font\n\nfig, ax = plt.subplots()\nax.text(\n   x=0.2,\n   y=0.3,\n   s=\"Hey there!\",\n   size=30,\n   font=font\n)\n</code></pre>"},{"location":"reference/load_google_font/#custom-font","title":"Custom font","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont = load_google_font(\"Roboto\", weight=\"bold\", italic=True) # italic and bold\n\nfig, ax = plt.subplots()\nax.text(\n   x=0.2,\n   y=0.3,\n   s=\"Hey there!\",\n   size=30,\n   font=font\n)\n</code></pre>"},{"location":"reference/load_google_font/#use-multiple-fonts","title":"Use multiple fonts","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont_bold = load_google_font(\"Roboto\", weight=\"bold\")\nfont_italic = load_google_font(\"Roboto\", italic=True)\n\nfig, ax = plt.subplots()\n\nax.text(\n   x=0.2,\n   y=0.3,\n   s=\"Hey bold!\",\n   size=30,\n   font=font_bold\n)\n\nax.text(\n   x=0.4,\n   y=0.6,\n   s=\"Hey italic!\",\n   size=30,\n   font=font_italic\n)\n</code></pre>"},{"location":"reference/load_google_font/#fancy-font","title":"Fancy font","text":"<p>All fonts from Google font can be used:</p> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pyfonts import load_google_font\n\nfont = load_google_font(\"Barrio\")\n\nfig, ax = plt.subplots()\nax.text(\n   x=0.1,\n   y=0.3,\n   s=\"What a weird font!\",\n   size=30,\n   font=font\n)\n</code></pre>"},{"location":"reference/preview_font/","title":"Preview font","text":""},{"location":"reference/preview_font/#preview-font","title":"Preview font","text":""},{"location":"reference/preview_font/#pyfonts.preview_font","title":"<code>pyfonts.preview_font</code>","text":""},{"location":"reference/preview_font/#pyfonts.preview_font.preview_font","title":"<code>preview_font(font_url)</code>","text":"<p>Preview a font. <code>font_url</code> is passed to <code>load_font()</code></p>"},{"location":"reference/set_default_font/","title":"Set default font","text":""},{"location":"reference/set_default_font/#set-default-font","title":"Set default font","text":""},{"location":"reference/set_default_font/#pyfonts.set_default_font","title":"<code>pyfonts.set_default_font(font)</code>","text":"<p>Set the default font for all text elements generated by matplotlib, including axis labels, tick labels, legend entries, titles, etc.</p> <p>Under the hood it updates all the relevant matplotlib rcParams.</p> <p>Parameters:</p> Name Type Description Default <code>font</code> <code>FontProperties</code> <p>A <code>FontProperties</code> object containing the font to set as default.</p> required <p>Examples:</p> <pre><code>```python\nfrom pyfonts import set_default_font, load_google_font\n\nset_default_font(load_google_font(\"Fascinate Inline\"))\nplt.title(\"Title\") # will be in Fascinate Inline\nplt.plot([1, 2, 3], label=\"Plot\")\n# ^ axis labels, ticks, legend entries all also in Fascinate Inline\n```\n</code></pre>"},{"location":"reference/set_default_font/#example","title":"Example","text":"<pre><code># mkdocs: render\nfrom pyfonts import set_default_font, load_google_font\n\nfont = load_google_font(\"Bitcount\")\nset_default_font(font) # Sets font for all text\n\nfig, ax = plt.subplots()\n\nax.plot([0, 1, 2, 3, 4], label='hello')\nax.set_title('Simple Line Chart')\nax.text(x=0, y=3.5, s=\"Using new default font\", size=20)\nax.legend()\n\nfont = load_google_font(\"Roboto\")\nax.text(x=0, y=2.5, s=\"Using a specific font\", size=20, font=font)\n</code></pre>"}]}